# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fz')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fz')
    _fz = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fz', [dirname(__file__)])
        except ImportError:
            import _fz
            return _fz
        try:
            _mod = imp.load_module('_fz', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fz = swig_import_helper()
    del swig_import_helper
else:
    import _fz
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ShotParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShotParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShotParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _fz.ShotParams_a_set
    __swig_getmethods__["a"] = _fz.ShotParams_a_get
    if _newclass:
        a = _swig_property(_fz.ShotParams_a_get, _fz.ShotParams_a_set)
    __swig_setmethods__["b"] = _fz.ShotParams_b_set
    __swig_getmethods__["b"] = _fz.ShotParams_b_get
    if _newclass:
        b = _swig_property(_fz.ShotParams_b_get, _fz.ShotParams_b_set)
    __swig_setmethods__["theta"] = _fz.ShotParams_theta_set
    __swig_getmethods__["theta"] = _fz.ShotParams_theta_get
    if _newclass:
        theta = _swig_property(_fz.ShotParams_theta_get, _fz.ShotParams_theta_set)
    __swig_setmethods__["phi"] = _fz.ShotParams_phi_set
    __swig_getmethods__["phi"] = _fz.ShotParams_phi_get
    if _newclass:
        phi = _swig_property(_fz.ShotParams_phi_get, _fz.ShotParams_phi_set)
    __swig_setmethods__["v"] = _fz.ShotParams_v_set
    __swig_getmethods__["v"] = _fz.ShotParams_v_get
    if _newclass:
        v = _swig_property(_fz.ShotParams_v_get, _fz.ShotParams_v_set)

    def __init__(self, *args):
        this = _fz.new_ShotParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fz.delete_ShotParams
    __del__ = lambda self: None
ShotParams_swigregister = _fz.ShotParams_swigregister
ShotParams_swigregister(ShotParams)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fz.Point_x_set
    __swig_getmethods__["x"] = _fz.Point_x_get
    if _newclass:
        x = _swig_property(_fz.Point_x_get, _fz.Point_x_set)
    __swig_setmethods__["y"] = _fz.Point_y_set
    __swig_getmethods__["y"] = _fz.Point_y_get
    if _newclass:
        y = _swig_property(_fz.Point_y_get, _fz.Point_y_set)

    def __init__(self, *args):
        this = _fz.new_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        return _fz.Point_toString(self)

    def fromString(self, s):
        return _fz.Point_fromString(self, s)
    __swig_destroy__ = _fz.delete_Point
    __del__ = lambda self: None
Point_swigregister = _fz.Point_swigregister
Point_swigregister(Point)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fz.Vector_x_set
    __swig_getmethods__["x"] = _fz.Vector_x_get
    if _newclass:
        x = _swig_property(_fz.Vector_x_get, _fz.Vector_x_set)
    __swig_setmethods__["y"] = _fz.Vector_y_set
    __swig_getmethods__["y"] = _fz.Vector_y_get
    if _newclass:
        y = _swig_property(_fz.Vector_y_get, _fz.Vector_y_set)
    __swig_setmethods__["z"] = _fz.Vector_z_set
    __swig_getmethods__["z"] = _fz.Vector_z_get
    if _newclass:
        z = _swig_property(_fz.Vector_z_get, _fz.Vector_z_set)

    def __init__(self, *args):
        this = _fz.new_Vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        return _fz.Vector_toString(self)

    def fromString(self, s):
        return _fz.Vector_fromString(self, s)
    __swig_destroy__ = _fz.delete_Vector
    __del__ = lambda self: None
Vector_swigregister = _fz.Vector_swigregister
Vector_swigregister(Vector)

class Ball(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ball, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ball, name)
    __repr__ = _swig_repr
    NOTINPLAY = _fz.Ball_NOTINPLAY
    STATIONARY = _fz.Ball_STATIONARY
    SPINNING = _fz.Ball_SPINNING
    SLIDING = _fz.Ball_SLIDING
    ROLLING = _fz.Ball_ROLLING
    POCKETED_SW = _fz.Ball_POCKETED_SW
    POCKETED_W = _fz.Ball_POCKETED_W
    POCKETED_NW = _fz.Ball_POCKETED_NW
    POCKETED_NE = _fz.Ball_POCKETED_NE
    POCKETED_E = _fz.Ball_POCKETED_E
    POCKETED_SE = _fz.Ball_POCKETED_SE
    SLIDING_SPINNING = _fz.Ball_SLIDING_SPINNING
    ROLLING_SPINNING = _fz.Ball_ROLLING_SPINNING
    UNKNOWN_STATE = _fz.Ball_UNKNOWN_STATE
    CUE = _fz.Ball_CUE
    ONE = _fz.Ball_ONE
    TWO = _fz.Ball_TWO
    THREE = _fz.Ball_THREE
    FOUR = _fz.Ball_FOUR
    FIVE = _fz.Ball_FIVE
    SIX = _fz.Ball_SIX
    SEVEN = _fz.Ball_SEVEN
    EIGHT = _fz.Ball_EIGHT
    NINE = _fz.Ball_NINE
    TEN = _fz.Ball_TEN
    ELEVEN = _fz.Ball_ELEVEN
    TWELVE = _fz.Ball_TWELVE
    THIRTEEN = _fz.Ball_THIRTEEN
    FOURTEEN = _fz.Ball_FOURTEEN
    FIFTEEN = _fz.Ball_FIFTEEN
    UNKNOWN_ID = _fz.Ball_UNKNOWN_ID

    def __init__(self, *args):
        this = _fz.new_Ball(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRadius(self):
        return _fz.Ball_getRadius(self)

    def getID(self):
        return _fz.Ball_getID(self)

    def getIDString(self):
        return _fz.Ball_getIDString(self)

    def getState(self):
        return _fz.Ball_getState(self)

    def getStateString(self):
        return _fz.Ball_getStateString(self)

    def getPos(self):
        return _fz.Ball_getPos(self)

    def getVelocity(self):
        return _fz.Ball_getVelocity(self)

    def getSpin(self):
        return _fz.Ball_getSpin(self)

    def setID(self, t):
        return _fz.Ball_setID(self, t)

    def setPos(self, pos):
        return _fz.Ball_setPos(self, pos)

    def setVelocity(self, vel):
        return _fz.Ball_setVelocity(self, vel)

    def setSpin(self, spin):
        return _fz.Ball_setSpin(self, spin)

    def setState(self, s):
        return _fz.Ball_setState(self, s)

    def isInPlay(self):
        return _fz.Ball_isInPlay(self)

    def isPocketed(self):
        return _fz.Ball_isPocketed(self)

    def updateState(self, VERBOSE=False):
        return _fz.Ball_updateState(self, VERBOSE)

    def toString(self):
        return _fz.Ball_toString(self)

    def fromString(self, s):
        return _fz.Ball_fromString(self, s)
    __swig_destroy__ = _fz.delete_Ball
    __del__ = lambda self: None
Ball_swigregister = _fz.Ball_swigregister
Ball_swigregister(Ball)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    g = _fz.Table_g
    MU_SLIDING = _fz.Table_MU_SLIDING
    MU_ROLLING = _fz.Table_MU_ROLLING
    MU_SPINNING = _fz.Table_MU_SPINNING
    TABLE_LENGTH = _fz.Table_TABLE_LENGTH
    TABLE_WIDTH = _fz.Table_TABLE_WIDTH
    CORNER_POCKET_WIDTH = _fz.Table_CORNER_POCKET_WIDTH
    SIDE_POCKET_WIDTH = _fz.Table_SIDE_POCKET_WIDTH
    RAIL_HEIGHT = _fz.Table_RAIL_HEIGHT
    CUE_LENGTH = _fz.Table_CUE_LENGTH
    RAIL_VEL_DAMPING_X = _fz.Table_RAIL_VEL_DAMPING_X
    RAIL_VEL_DAMPING_Y = _fz.Table_RAIL_VEL_DAMPING_Y
    RAIL_SPIN_DAMPING = _fz.Table_RAIL_SPIN_DAMPING
    RAIL_VEL_ANGLE_ADJ = _fz.Table_RAIL_VEL_ANGLE_ADJ
    RAIL_ZSPIN_ANGLE_ADJ = _fz.Table_RAIL_ZSPIN_ANGLE_ADJ
    CUE_MASS = _fz.Table_CUE_MASS
    I = _fz.Table_I
    SW_POCKET = _fz.Table_SW_POCKET
    SW_RAIL = _fz.Table_SW_RAIL
    W_POCKET = _fz.Table_W_POCKET
    NW_RAIL = _fz.Table_NW_RAIL
    NW_POCKET = _fz.Table_NW_POCKET
    N_RAIL = _fz.Table_N_RAIL
    NE_POCKET = _fz.Table_NE_POCKET
    NE_RAIL = _fz.Table_NE_RAIL
    E_POCKET = _fz.Table_E_POCKET
    SE_RAIL = _fz.Table_SE_RAIL
    SE_POCKET = _fz.Table_SE_POCKET
    S_RAIL = _fz.Table_S_RAIL
    UNKNOWN_BOUNDARY = _fz.Table_UNKNOWN_BOUNDARY
    SW = _fz.Table_SW
    W = _fz.Table_W
    NW = _fz.Table_NW
    NE = _fz.Table_NE
    E = _fz.Table_E
    SE = _fz.Table_SE
    UNKNOWN_POCKET = _fz.Table_UNKNOWN_POCKET

    def __init__(self, *args):
        this = _fz.new_Table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getLength(self):
        return _fz.Table_getLength(self)

    def getWidth(self):
        return _fz.Table_getWidth(self)

    def getHeadString(self):
        return _fz.Table_getHeadString(self)

    def getFootSpot(self):
        return _fz.Table_getFootSpot(self)

    def setCueLength(self, length):
        return _fz.Table_setCueLength(self, length)

    def getCueLength(self):
        return _fz.Table_getCueLength(self)

    def setRailHeight(self, height):
        return _fz.Table_setRailHeight(self, height)

    def getRailHeight(self):
        return _fz.Table_getRailHeight(self)

    def setMuSliding(self, mu):
        return _fz.Table_setMuSliding(self, mu)

    def getMuSliding(self):
        return _fz.Table_getMuSliding(self)

    def setMuRolling(self, mu):
        return _fz.Table_setMuRolling(self, mu)

    def getMuRolling(self):
        return _fz.Table_getMuRolling(self)

    def setMuSpinning(self, mu):
        return _fz.Table_setMuSpinning(self, mu)

    def getMuSpinning(self):
        return _fz.Table_getMuSpinning(self)

    def getPocketCenter(self, pocket):
        return _fz.Table_getPocketCenter(self, pocket)

    def getPocketRight(self, pocket):
        return _fz.Table_getPocketRight(self, pocket)

    def getPocketLeft(self, pocket):
        return _fz.Table_getPocketLeft(self, pocket)
    if _newclass:
        defaultTable = staticmethod(_fz.Table_defaultTable)
    else:
        defaultTable = _fz.Table_defaultTable
    if _newclass:
        stateFromPocket = staticmethod(_fz.Table_stateFromPocket)
    else:
        stateFromPocket = _fz.Table_stateFromPocket
    if _newclass:
        pocketFromBndId = staticmethod(_fz.Table_pocketFromBndId)
    else:
        pocketFromBndId = _fz.Table_pocketFromBndId
    if _newclass:
        bndIdFromPocket = staticmethod(_fz.Table_bndIdFromPocket)
    else:
        bndIdFromPocket = _fz.Table_bndIdFromPocket
    if _newclass:
        boundaryName = staticmethod(_fz.Table_boundaryName)
    else:
        boundaryName = _fz.Table_boundaryName
    if _newclass:
        pocketName = staticmethod(_fz.Table_pocketName)
    else:
        pocketName = _fz.Table_pocketName
    __swig_destroy__ = _fz.delete_Table
    __del__ = lambda self: None
Table_swigregister = _fz.Table_swigregister
Table_swigregister(Table)

def Table_defaultTable():
    return _fz.Table_defaultTable()
Table_defaultTable = _fz.Table_defaultTable

def Table_stateFromPocket(pocket):
    return _fz.Table_stateFromPocket(pocket)
Table_stateFromPocket = _fz.Table_stateFromPocket

def Table_pocketFromBndId(bnd):
    return _fz.Table_pocketFromBndId(bnd)
Table_pocketFromBndId = _fz.Table_pocketFromBndId

def Table_bndIdFromPocket(pocket):
    return _fz.Table_bndIdFromPocket(pocket)
Table_bndIdFromPocket = _fz.Table_bndIdFromPocket

def Table_boundaryName(boundary):
    return _fz.Table_boundaryName(boundary)
Table_boundaryName = _fz.Table_boundaryName

def Table_pocketName(pocket):
    return _fz.Table_pocketName(pocket)
Table_pocketName = _fz.Table_pocketName

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NO_EVENT = _fz.Event_NO_EVENT
    STATE_CHANGE = _fz.Event_STATE_CHANGE
    BALL_COLLISION = _fz.Event_BALL_COLLISION
    RAIL_COLLISION = _fz.Event_RAIL_COLLISION
    POCKETED = _fz.Event_POCKETED
    CUE_STRIKE = _fz.Event_CUE_STRIKE
    MISCUE = _fz.Event_MISCUE
    UNKNOWN_EVENT = _fz.Event_UNKNOWN_EVENT

    def getTime(self):
        return _fz.Event_getTime(self)

    def getBall1(self):
        return _fz.Event_getBall1(self)

    def getBall1Data(self):
        return _fz.Event_getBall1Data(self)

    def __lt__(self, other):
        return _fz.Event___lt__(self, other)
    if _newclass:
        eventCmp = staticmethod(_fz.Event_eventCmp)
    else:
        eventCmp = _fz.Event_eventCmp

    def toString(self):
        return _fz.Event_toString(self)

    def getType(self):
        return _fz.Event_getType(self)

    def getTypeString(self):
        return _fz.Event_getTypeString(self)

    def getBall2(self):
        return _fz.Event_getBall2(self)

    def getBall2Data(self):
        return _fz.Event_getBall2Data(self)

    def relatedTo(self, other):
        return _fz.Event_relatedTo(self, other)

    def involvesBall(self, b):
        return _fz.Event_involvesBall(self, b)
    __swig_destroy__ = _fz.delete_Event
    __del__ = lambda self: None

    def handle(self, ts, VERBOSE=False):
        return _fz.Event_handle(self, ts, VERBOSE)
Event_swigregister = _fz.Event_swigregister
Event_swigregister(Event)

def Event_eventCmp(event1, event2):
    return _fz.Event_eventCmp(event1, event2)
Event_eventCmp = _fz.Event_eventCmp

class StateChangeEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateChangeEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateChangeEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b):
        this = _fz.new_StateChangeEvent(time, b)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _fz.StateChangeEvent_getType(self)

    def getTypeString(self):
        return _fz.StateChangeEvent_getTypeString(self)
    __swig_destroy__ = _fz.delete_StateChangeEvent
    __del__ = lambda self: None
StateChangeEvent_swigregister = _fz.StateChangeEvent_swigregister
StateChangeEvent_swigregister(StateChangeEvent)

class BallCollisionEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallCollisionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallCollisionEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b1, b2):
        this = _fz.new_BallCollisionEvent(time, b1, b2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _fz.BallCollisionEvent_getType(self)

    def getTypeString(self):
        return _fz.BallCollisionEvent_getTypeString(self)

    def relatedTo(self, other):
        return _fz.BallCollisionEvent_relatedTo(self, other)

    def involvesBall(self, b):
        return _fz.BallCollisionEvent_involvesBall(self, b)
    __swig_destroy__ = _fz.delete_BallCollisionEvent
    __del__ = lambda self: None

    def getBall2(self):
        return _fz.BallCollisionEvent_getBall2(self)

    def getBall2Data(self):
        return _fz.BallCollisionEvent_getBall2Data(self)
BallCollisionEvent_swigregister = _fz.BallCollisionEvent_swigregister
BallCollisionEvent_swigregister(BallCollisionEvent)

class RailCollisionEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RailCollisionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RailCollisionEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b, rail):
        this = _fz.new_RailCollisionEvent(time, b, rail)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _fz.RailCollisionEvent_getType(self)

    def getTypeString(self):
        return _fz.RailCollisionEvent_getTypeString(self)

    def getRail(self):
        return _fz.RailCollisionEvent_getRail(self)
    __swig_destroy__ = _fz.delete_RailCollisionEvent
    __del__ = lambda self: None
RailCollisionEvent_swigregister = _fz.RailCollisionEvent_swigregister
RailCollisionEvent_swigregister(RailCollisionEvent)

class PocketedEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PocketedEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PocketedEvent, name)
    __repr__ = _swig_repr

    def __init__(self, time, b, pocket):
        this = _fz.new_PocketedEvent(time, b, pocket)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _fz.PocketedEvent_getType(self)

    def getTypeString(self):
        return _fz.PocketedEvent_getTypeString(self)

    def getPocket(self):
        return _fz.PocketedEvent_getPocket(self)
    __swig_destroy__ = _fz.delete_PocketedEvent
    __del__ = lambda self: None
PocketedEvent_swigregister = _fz.PocketedEvent_swigregister
PocketedEvent_swigregister(PocketedEvent)

class CueStrikeEvent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CueStrikeEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CueStrikeEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fz.new_CueStrikeEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self):
        return _fz.CueStrikeEvent_getType(self)

    def getTypeString(self):
        return _fz.CueStrikeEvent_getTypeString(self)

    def getParams(self):
        return _fz.CueStrikeEvent_getParams(self)
    __swig_destroy__ = _fz.delete_CueStrikeEvent
    __del__ = lambda self: None
CueStrikeEvent_swigregister = _fz.CueStrikeEvent_swigregister
CueStrikeEvent_swigregister(CueStrikeEvent)

class Shot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getEventList(self):
        return _fz.Shot_getEventList(self)

    def getDuration(self):
        return _fz.Shot_getDuration(self)
    __swig_destroy__ = _fz.delete_Shot
    __del__ = lambda self: None
Shot_swigregister = _fz.Shot_swigregister
Shot_swigregister(Shot)

class TableState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableState, name)
    __repr__ = _swig_repr
    MAX_VELOCITY = _fz.TableState_MAX_VELOCITY
    MIN_THETA = _fz.TableState_MIN_THETA
    MAX_THETA = _fz.TableState_MAX_THETA
    OK_PRECONDITION = _fz.TableState_OK_PRECONDITION
    BAD_A_VAL = _fz.TableState_BAD_A_VAL
    BAD_B_VAL = _fz.TableState_BAD_B_VAL
    BAD_THETA_VAL = _fz.TableState_BAD_THETA_VAL
    BAD_PHI_VAL = _fz.TableState_BAD_PHI_VAL
    BAD_V_VAL = _fz.TableState_BAD_V_VAL
    BAD_X_VAL = _fz.TableState_BAD_X_VAL
    BAD_Y_VAL = _fz.TableState_BAD_Y_VAL
    CUE_STICK_COLLISION = _fz.TableState_CUE_STICK_COLLISION
    BALL_OVERLAP = _fz.TableState_BALL_OVERLAP

    def __init__(self, *args):
        this = _fz.new_TableState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumBalls(self):
        return _fz.TableState_getNumBalls(self)

    def setBall(self, *args):
        return _fz.TableState_setBall(self, *args)

    def spotBall(self, *args):
        return _fz.TableState_spotBall(self, *args)

    def getBall(self, btype):
        return _fz.TableState_getBall(self, btype)

    def getTable(self):
        return _fz.TableState_getTable(self)

    def isValidBallPlacement(self, VERBOSE=False):
        return _fz.TableState_isValidBallPlacement(self, VERBOSE)

    def isPhysicallyPossible(self, shotParams, VERBOSE=False):
        return _fz.TableState_isPhysicallyPossible(self, shotParams, VERBOSE)

    def addNoise(self, dither):
        return _fz.TableState_addNoise(self, dither)

    def executeShot(self, sp, verbose=False, errors=False):
        return _fz.TableState_executeShot(self, sp, verbose, errors)

    def getFirstBallHit(self, sp):
        return _fz.TableState_getFirstBallHit(self, sp)

    def toString(self):
        return _fz.TableState_toString(self)

    def fromString(self, s):
        return _fz.TableState_fromString(self, s)
    __swig_destroy__ = _fz.delete_TableState
    __del__ = lambda self: None
TableState_swigregister = _fz.TableState_swigregister
TableState_swigregister(TableState)


def getFastFizVersion():
    return _fz.getFastFizVersion()
getFastFizVersion = _fz.getFastFizVersion

def getTestState():
    return _fz.getTestState()
getTestState = _fz.getTestState

def getTestShotParams():
    return _fz.getTestShotParams()
getTestShotParams = _fz.getTestShotParams
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fz.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fz.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fz.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fz.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fz.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fz.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fz.SwigPyIterator_copy(self)

    def next(self):
        return _fz.SwigPyIterator_next(self)

    def __next__(self):
        return _fz.SwigPyIterator___next__(self)

    def previous(self):
        return _fz.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fz.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fz.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fz.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fz.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fz.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fz.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fz.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fz.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class EventVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fz.EventVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fz.EventVector___nonzero__(self)

    def __bool__(self):
        return _fz.EventVector___bool__(self)

    def __len__(self):
        return _fz.EventVector___len__(self)

    def __getslice__(self, i, j):
        return _fz.EventVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fz.EventVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fz.EventVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fz.EventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fz.EventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fz.EventVector___setitem__(self, *args)

    def pop(self):
        return _fz.EventVector_pop(self)

    def append(self, x):
        return _fz.EventVector_append(self, x)

    def empty(self):
        return _fz.EventVector_empty(self)

    def size(self):
        return _fz.EventVector_size(self)

    def swap(self, v):
        return _fz.EventVector_swap(self, v)

    def begin(self):
        return _fz.EventVector_begin(self)

    def end(self):
        return _fz.EventVector_end(self)

    def rbegin(self):
        return _fz.EventVector_rbegin(self)

    def rend(self):
        return _fz.EventVector_rend(self)

    def clear(self):
        return _fz.EventVector_clear(self)

    def get_allocator(self):
        return _fz.EventVector_get_allocator(self)

    def pop_back(self):
        return _fz.EventVector_pop_back(self)

    def erase(self, *args):
        return _fz.EventVector_erase(self, *args)

    def __init__(self, *args):
        this = _fz.new_EventVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _fz.EventVector_push_back(self, x)

    def front(self):
        return _fz.EventVector_front(self)

    def back(self):
        return _fz.EventVector_back(self)

    def assign(self, n, x):
        return _fz.EventVector_assign(self, n, x)

    def resize(self, *args):
        return _fz.EventVector_resize(self, *args)

    def insert(self, *args):
        return _fz.EventVector_insert(self, *args)

    def reserve(self, n):
        return _fz.EventVector_reserve(self, n)

    def capacity(self):
        return _fz.EventVector_capacity(self)
    __swig_destroy__ = _fz.delete_EventVector
    __del__ = lambda self: None
EventVector_swigregister = _fz.EventVector_swigregister
EventVector_swigregister(EventVector)

DEC_NO_DECISION = _fz.DEC_NO_DECISION
DEC_KEEP_SHOOTING = _fz.DEC_KEEP_SHOOTING
DEC_RERACK = _fz.DEC_RERACK
DEC_EIGHTBALL_RERACK_OPP_SHOOT = _fz.DEC_EIGHTBALL_RERACK_OPP_SHOOT
DEC_CONCEDE = _fz.DEC_CONCEDE
DEC_NINEBALL_PUSH_OUT = _fz.DEC_NINEBALL_PUSH_OUT
TT_NORMAL = _fz.TT_NORMAL
TT_BALL_IN_HAND = _fz.TT_BALL_IN_HAND
TT_BEHIND_LINE = _fz.TT_BEHIND_LINE
TT_RESERVED = _fz.TT_RESERVED
TT_BREAK = _fz.TT_BREAK
TT_WIN = _fz.TT_WIN
TT_EIGHTBALL_FOUL_ON_BREAK = _fz.TT_EIGHTBALL_FOUL_ON_BREAK
TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK = _fz.TT_EIGHTBALL_8BALL_POCKETED_ON_BREAK
TT_NINEBALL_FIRST_SHOT = _fz.TT_NINEBALL_FIRST_SHOT
TT_NINEBALL_PUSH_OUT = _fz.TT_NINEBALL_PUSH_OUT

def __rshift__(arg1, tt):
    return _fz.__rshift__(arg1, tt)
__rshift__ = _fz.__rshift__
GT_NONE = _fz.GT_NONE
GT_EIGHTBALL = _fz.GT_EIGHTBALL
GT_NINEBALL = _fz.GT_NINEBALL
GT_SNOOKER = _fz.GT_SNOOKER
GT_ONEPOCKET = _fz.GT_ONEPOCKET
SR_OK = _fz.SR_OK
SR_OK_LOST_TURN = _fz.SR_OK_LOST_TURN
SR_BAD_PARAMS = _fz.SR_BAD_PARAMS
SR_SHOT_IMPOSSIBLE = _fz.SR_SHOT_IMPOSSIBLE
SR_TIMEOUT = _fz.SR_TIMEOUT
class GameShot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameShot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameShot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _fz.GameShot_params_set
    __swig_getmethods__["params"] = _fz.GameShot_params_get
    if _newclass:
        params = _swig_property(_fz.GameShot_params_get, _fz.GameShot_params_set)
    __swig_setmethods__["cue_x"] = _fz.GameShot_cue_x_set
    __swig_getmethods__["cue_x"] = _fz.GameShot_cue_x_get
    if _newclass:
        cue_x = _swig_property(_fz.GameShot_cue_x_get, _fz.GameShot_cue_x_set)
    __swig_setmethods__["cue_y"] = _fz.GameShot_cue_y_set
    __swig_getmethods__["cue_y"] = _fz.GameShot_cue_y_get
    if _newclass:
        cue_y = _swig_property(_fz.GameShot_cue_y_get, _fz.GameShot_cue_y_set)
    __swig_setmethods__["ball"] = _fz.GameShot_ball_set
    __swig_getmethods__["ball"] = _fz.GameShot_ball_get
    if _newclass:
        ball = _swig_property(_fz.GameShot_ball_get, _fz.GameShot_ball_set)
    __swig_setmethods__["pocket"] = _fz.GameShot_pocket_set
    __swig_getmethods__["pocket"] = _fz.GameShot_pocket_get
    if _newclass:
        pocket = _swig_property(_fz.GameShot_pocket_get, _fz.GameShot_pocket_set)
    __swig_setmethods__["decision"] = _fz.GameShot_decision_set
    __swig_getmethods__["decision"] = _fz.GameShot_decision_get
    if _newclass:
        decision = _swig_property(_fz.GameShot_decision_get, _fz.GameShot_decision_set)
    __swig_setmethods__["timeSpent"] = _fz.GameShot_timeSpent_set
    __swig_getmethods__["timeSpent"] = _fz.GameShot_timeSpent_get
    if _newclass:
        timeSpent = _swig_property(_fz.GameShot_timeSpent_get, _fz.GameShot_timeSpent_set)

    def __init__(self):
        this = _fz.new_GameShot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fz.delete_GameShot
    __del__ = lambda self: None
GameShot_swigregister = _fz.GameShot_swigregister
GameShot_swigregister(GameShot)

class GameState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameState, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        Factory = staticmethod(_fz.GameState_Factory)
    else:
        Factory = _fz.GameState_Factory
    if _newclass:
        RackedState = staticmethod(_fz.GameState_RackedState)
    else:
        RackedState = _fz.GameState_RackedState

    def toString(self):
        return _fz.GameState_toString(self)

    def gameType(self):
        return _fz.GameState_gameType(self)

    def isOpenTable(self):
        return _fz.GameState_isOpenTable(self)

    def getTurnType(self):
        return _fz.GameState_getTurnType(self)

    def playingSolids(self):
        return _fz.GameState_playingSolids(self)

    def curPlayerStarted(self):
        return _fz.GameState_curPlayerStarted(self)

    def timeLeft(self):
        return _fz.GameState_timeLeft(self)

    def timeLeftOpp(self):
        return _fz.GameState_timeLeftOpp(self)

    def tableState(self):
        return _fz.GameState_tableState(self)

    def executeShot(self, shot, shotObj=None):
        return _fz.GameState_executeShot(self, shot, shotObj)
    __swig_destroy__ = _fz.delete_GameState
    __del__ = lambda self: None
GameState_swigregister = _fz.GameState_swigregister
GameState_swigregister(GameState)

def GameState_Factory(*args):
    return _fz.GameState_Factory(*args)
GameState_Factory = _fz.GameState_Factory

def GameState_RackedState(gameType):
    return _fz.GameState_RackedState(gameType)
GameState_RackedState = _fz.GameState_RackedState


def getRulesVersion():
    return _fz.getRulesVersion()
getRulesVersion = _fz.getRulesVersion
# This file is compatible with both classic and new-style classes.


